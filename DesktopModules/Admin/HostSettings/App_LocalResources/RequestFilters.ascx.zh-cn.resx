<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="cmdAdd.Text" xml:space="preserve">
    <value>添加新规则</value>
  </data>
  <data name="cmdCancel.Text" xml:space="preserve">
    <value>取消编辑</value>
  </data>
  <data name="Delete.Text" xml:space="preserve">
    <value>删除规则</value>
  </data>
  <data name="Edit.Text" xml:space="preserve">
    <value>编辑规则</value>
  </data>
  <data name="plServerVar.Text" xml:space="preserve">
    <value>服务器变量</value>
  </data>
  <data name="plOperator.Text" xml:space="preserve">
    <value>操作</value>
  </data>
  <data name="plValue.Text" xml:space="preserve">
    <value>匹配值</value>
  </data>
  <data name="plAction.Text" xml:space="preserve">
    <value>动作</value>
  </data>
  <data name="plLocation.Text" xml:space="preserve">
    <value>位置</value>
  </data>
  <data name="saveRule.Text" xml:space="preserve">
    <value>更新规则</value>
  </data>
  <data name="unauthorized.Text" xml:space="preserve">
    <value>当前用户没有更改DotNetNuke.config文件的权限，当前文件可能标记为只读或用户无权访问.</value>
  </data>
  <data name="plAction.Help" xml:space="preserve">
    <value>如果访问请求与定义的规则一致时，将执行指定的动作.
</value>
  </data>
  <data name="plLocation.Help" xml:space="preserve">
    <value>如果访问请求与定义的规则一致时，用户访问将跳转页面. 该值仅用于重定向和永久重定向动作。</value>
  </data>
  <data name="plOperator.Help" xml:space="preserve">
    <value>请选择比较访问请求与定义规则所用的操作符。</value>
  </data>
  <data name="plServerVar.Help" xml:space="preserve">
    <value>请选择过滤访问请求时所用的服务器变量，请到MSDN查看完整的服务器变量列表.</value>
  </data>
  <data name="plValue.Help" xml:space="preserve">
    <value>输入触发规则的服务器变量值. 如果是正则表达式规则，您所输入的应该是一个正则表达式. 如果不是,您可以输入以分号分隔的一列值.</value>
  </data>
  <data name="lblServerVarLink.Text" xml:space="preserve">
    <value>跳转到&lt;a href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/iissdk/html/21b3be8f-d4ed-4059-8e21-6cba2c253006.asp" class="CommandButton" target="_blank" &gt;MSDN帮助&lt;/a&gt; .</value>
  </data>
  <data name="lblWarning.Text" xml:space="preserve">
    <value>警告：增加错误的访问规则，可能会影响用户访问您的网站，需要手动修改配置文件DotNetNuke.config以删除错误的访问规则.</value>
  </data>
</root>