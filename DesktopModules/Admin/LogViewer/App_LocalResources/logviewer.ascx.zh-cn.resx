<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="plPortalID.Text" xml:space="preserve">
    <value>站点</value>
  </data>
  <data name="plPortalID.Help" xml:space="preserve">
    <value>选择要查看的站点</value>
  </data>
  <data name="plLogType.Text" xml:space="preserve">
    <value>事件类型</value>
  </data>
  <data name="plLogType.Help" xml:space="preserve">
    <value>在记录设置中您可以选择开启或禁用指定的事件类型记录</value>
  </data>
  <data name="plShowRecords.Text" xml:space="preserve">
    <value>查看记录</value>
  </data>
  <data name="plShowRecords.Help" xml:space="preserve">
    <value>选择要查看的记录</value>
  </data>
  <data name="ColorCoding.Text" xml:space="preserve">
    <value>用不同颜色区分记录类型</value>
  </data>
  <data name="Settings.Text" xml:space="preserve">
    <value>过滤设置</value>
  </data>
  <data name="Legend.Text" xml:space="preserve">
    <value>记录类型颜色对应表</value>
  </data>
  <data name="Date.Text" xml:space="preserve">
    <value>日期</value>
  </data>
  <data name="Type.Text" xml:space="preserve">
    <value>事件类型</value>
  </data>
  <data name="Username.Text" xml:space="preserve">
    <value>操作用户</value>
  </data>
  <data name="Portal.Text" xml:space="preserve">
    <value>站点</value>
  </data>
  <data name="Summary.Text" xml:space="preserve">
    <value>概要</value>
  </data>
  <data name="btnDelete.Text" xml:space="preserve">
    <value>删除选中记录</value>
  </data>
  <data name="btnClear.Text" xml:space="preserve">
    <value>清除所有记录</value>
  </data>
  <data name="SendExceptions.Text" xml:space="preserve">
    <value>发送记录</value>
  </data>
  <data name="ExceptionsWarning.Text" xml:space="preserve">
    <value />
  </data>
  <data name="SendExceptionsEmail.Text" xml:space="preserve">
    <value>通过点子邮件发送记录</value>
  </data>
  <data name="plEmailAddress.Text" xml:space="preserve">
    <value>电子邮件地址</value>
  </data>
  <data name="plEmailAddress.Help" xml:space="preserve">
    <value>请输入电子邮件地址接收选中记录</value>
  </data>
  <data name="SendMessage.Text" xml:space="preserve">
    <value>附加信息 (可选)</value>
  </data>
  <data name="SendMessage.Help" xml:space="preserve">
    <value>请在需要时输入附加信息， 将随记录一同发送</value>
  </data>
  <data name="btnEmail.Text" xml:space="preserve">
    <value>发送选中记录</value>
  </data>
  <data name="AddContent.Action" xml:space="preserve">
    <value>编辑记录设置</value>
  </data>
  <data name="NoEntries.Text" xml:space="preserve">
    <value>没有任何记录.</value>
  </data>
  <data name="Showing.Text" xml:space="preserve">
    <value>Showing {0} to {1} of {2}</value>
  </data>
  <data name="DeleteSuccess.Text" xml:space="preserve">
    <value>成功删除选中的记录.</value>
  </data>
  <data name="EmailSuccess.Text" xml:space="preserve">
    <value>电子邮件发送成功.</value>
  </data>
  <data name="EmailFailure.Text" xml:space="preserve">
    <value>电子邮件发送失败.</value>
  </data>
  <data name="ServiceUnavailable.Text" xml:space="preserve">
    <value>DotNetNuke.com的web service当前不可用</value>
  </data>
  <data name="ServerName.Text" xml:space="preserve">
    <value>&lt;b&gt;服务器&lt;/b&gt;: </value>
  </data>
  <data name="LogCleared.Text" xml:space="preserve">
    <value>成功清除所有记录.</value>
  </data>
  <data name="ClickRow.Text" xml:space="preserve">
    <value>点击记录查看详细信息</value>
  </data>
  <data name="ExceptionCode.Text" xml:space="preserve">
    <value>异常记录</value>
  </data>
  <data name="ItemCreatedCode.Text" xml:space="preserve">
    <value>项目创建</value>
  </data>
  <data name="ItemUpdatedCode.Text" xml:space="preserve">
    <value>项目更新</value>
  </data>
  <data name="ItemDeletedCode.Text" xml:space="preserve">
    <value>项目删除</value>
  </data>
  <data name="SuccessCode.Text" xml:space="preserve">
    <value>运行成功</value>
  </data>
  <data name="FailureCode.Text" xml:space="preserve">
    <value>运行失败</value>
  </data>
  <data name="AdminOpCode.Text" xml:space="preserve">
    <value>管理员常规操作</value>
  </data>
  <data name="AdminAlertCode.Text" xml:space="preserve">
    <value>管理员警报</value>
  </data>
  <data name="HostAlertCode.Text" xml:space="preserve">
    <value>主机警报</value>
  </data>
  <data name="ToEmail.Text" xml:space="preserve">
    <value>指定电子邮件地址</value>
  </data>
  <data name="ControlTitle_.Text" xml:space="preserve">
    <value>查看事件记录</value>
  </data>
  <data name="ModuleHelp.Text" xml:space="preserve">
    <value>&lt;h1&gt;关于事件记录&lt;/h1&gt;&lt;p&gt;在此查看站点事件记录, 错误记录可以帮助您调试系统, 模块.&lt;/p&gt;</value>
  </data>
  <data name="SecurityException.Text" xml:space="preserve">
    <value>安全异常</value>
  </data>
</root>