<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="plBannerName.Text" xml:space="preserve">
    <value>广告名称</value>
  </data>
  <data name="plBannerName.Help" xml:space="preserve">
    <value>输入广告名称，名称将会作为广告横幅的替换文字。</value>
  </data>
  <data name="BannerName.ErrorMessage" xml:space="preserve">
    <value>广告名称为必添项</value>
  </data>
  <data name="plBannerType.Text" xml:space="preserve">
    <value>广告类型</value>
  </data>
  <data name="plBannerType.Help" xml:space="preserve">
    <value>选择一个广告显示类型</value>
  </data>
  <data name="plBannerGroup.Text" xml:space="preserve">
    <value>广告组</value>
  </data>
  <data name="plBannerGroup.Help" xml:space="preserve">
    <value>请输入一个广告组， 以关联同类型的广告。</value>
  </data>
  <data name="plImage.Text" xml:space="preserve">
    <value>图片/链接</value>
  </data>
  <data name="plImage.Help" xml:space="preserve">
    <value>如果是图片广告请指定广告图片（上传新图片或链接外部图片），文字广告请指定显示在广告中的链接。</value>
  </data>
  <data name="plDescription.Text" xml:space="preserve">
    <value>广告描述/脚本</value>
  </data>
  <data name="plDescription.Help" xml:space="preserve">
    <value>输入一个广告描述，这将会显示为广告图片的替换文字或者文字广告中的描述。</value>
  </data>
  <data name="plURL.Text" xml:space="preserve">
    <value>链接</value>
  </data>
  <data name="plURL.Help" xml:space="preserve">
    <value>输入当用户点击广告时转向的链接，如果没有输入，将使用广告供应商的链接地址。</value>
  </data>
  <data name="plImpressions.Text" xml:space="preserve">
    <value>显示次数</value>
  </data>
  <data name="plImpressions.Help" xml:space="preserve">
    <value>输入广告显示次数，输入“0"为无限制。</value>
  </data>
  <data name="Impressions.ErrorMessage" xml:space="preserve">
    <value>&lt;br&gt;请输入一个有效的显示次数值</value>
  </data>
  <data name="plCPM.Text" xml:space="preserve">
    <value>CPM/费用</value>
  </data>
  <data name="plCPM.Help" xml:space="preserve">
    <value>CPM是显示1000次的费用，也可以是固定费用。</value>
  </data>
  <data name="CPM.ErrorMessage" xml:space="preserve">
    <value>请输入一个有效的CPM值</value>
  </data>
  <data name="plStartDate.Text" xml:space="preserve">
    <value>开始日期</value>
  </data>
  <data name="plStartDate.Help" xml:space="preserve">
    <value>使用开始日期控制广告开始的时间。</value>
  </data>
  <data name="plEndDate.Text" xml:space="preserve">
    <value>截止日期</value>
  </data>
  <data name="plEndDate.Help" xml:space="preserve">
    <value>使用终止日期控制广告的结束时间</value>
  </data>
  <data name="plCriteria.Text" xml:space="preserve">
    <value>条件</value>
  </data>
  <data name="plCriteria.Help" xml:space="preserve">
    <value>指定广告在达到显示次数"并/或"达到截止日期已到时终止显示</value>
  </data>
  <data name="cmdEmail.Text" xml:space="preserve">
    <value>通知广告供应商更新</value>
  </data>
  <data name="ControlTitle_banner.Text" xml:space="preserve">
    <value>编辑广告</value>
  </data>
  <data name="ModuleHelp.Text" xml:space="preserve">
    <value>&lt;h1&gt;关于广告模块&lt;/h1&gt;
&lt;p&gt;广告模块会轮播显示其它商家投放在站点和主机的广告。&lt;/p&gt;
&lt;h1&gt;设置广告选项&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;添加广告模块或选择现存的广告模块.&lt;/li&gt;
&lt;li&gt;点击"设置广告"选项. &lt;/li&gt;
&lt;li&gt;在广告来源, 选择"站点"或"主机". &lt;/li&gt;
&lt;li&gt;在广告类型, 选择广告类型.&lt;/li&gt;
&lt;li&gt;广告个数, 选择要显示的广告个数. &lt;/li&gt;
&lt;li&gt;点击"更新".&lt;/li&gt;
&lt;/ol&gt;</value>
  </data>
  <data name="EmailSuccess.Text" xml:space="preserve">
    <value>电子邮件发送成功</value>
  </data>
  <data name="EmailFailure.Text" xml:space="preserve">
    <value>电子邮件发送失败: {0}</value>
  </data>
  <data name="plWidth.Text" xml:space="preserve">
    <value>宽度</value>
  </data>
  <data name="plWidth.Help" xml:space="preserve">
    <value>输入广告图片的宽度，这对图片广告是可选的，但对Flash广告是必须的。</value>
  </data>
  <data name="plHeight.Text" xml:space="preserve">
    <value>高度</value>
  </data>
  <data name="plHeight.Help" xml:space="preserve">
    <value>输入广告图片的高度，这对图片广告是可选的，但对Flash广告是必须的。</value>
  </data>
  <data name="cmdCopy.Text" xml:space="preserve">
    <value>复制</value>
  </data>
</root>