<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ContentOptions.Action" xml:space="preserve">
    <value>查看调度状态</value>
  </data>
  <data name="ScheduleHistory.Action" xml:space="preserve">
    <value>查看调度历史</value>
  </data>
  <data name="plEnabled.Text" xml:space="preserve">
    <value>启用调度</value>
  </data>
  <data name="plTimeLapse.Text" xml:space="preserve">
    <value>任务执行频率:</value>
  </data>
  <data name="plTimeLapse.Help" xml:space="preserve">
    <value>例如，选择"5"和"分钟"表示任务将每隔5分钟执行一次，留空则表示禁止此任务的计时器。</value>
  </data>
  <data name="Minutes.Text" xml:space="preserve">
    <value>分</value>
  </data>
  <data name="Days.Text" xml:space="preserve">
    <value>天</value>
  </data>
  <data name="Hours.Text" xml:space="preserve">
    <value>时</value>
  </data>
  <data name="plRetryTimeLapse.Text" xml:space="preserve">
    <value>重试频率</value>
  </data>
  <data name="plRetryTimeLapse.Help" xml:space="preserve">
    <value>例如，选择"5"和"分钟"表示任务执行失败后将每隔5分钟重新执行，留空则表示不进行重试。</value>
  </data>
  <data name="plRetainHistoryNum.Text" xml:space="preserve">
    <value>保留调度历史:</value>
  </data>
  <data name="plRetainHistoryNum.Help" xml:space="preserve">
    <value>例如: 选择 "10" 则保存最新10条记录。</value>
  </data>
  <data name="plAttachToEvent.Text" xml:space="preserve">
    <value>运行任务:</value>
  </data>
  <data name="plAttachToEvent.Help" xml:space="preserve">
    <value>例如: 选择 “应用程序启动”表示运行此调度任务当WEB程序启动时。请注意，如选择任务运行于“应用程序结束” 事件，在一些主机是不可靠的。</value>
  </data>
  <data name="None.Text" xml:space="preserve">
    <value>无</value>
  </data>
  <data name="APPLICATION_START.Text" xml:space="preserve">
    <value>应用程序启动时加载</value>
  </data>
  <data name="plCatchUpEnabled.Text" xml:space="preserve">
    <value>弥补执行:</value>
  </data>
  <data name="plCatchUpEnabled.Help" xml:space="preserve">
    <value>选中此项，如果服务器曾经当机，那么当服务器恢复正常时，在当机期间所错过的任务将会被执行。</value>
  </data>
  <data name="plObjectDependencies.Text" xml:space="preserve">
    <value>依赖对象:</value>
  </data>
  <data name="plObjectDependencies.Help" xml:space="preserve">
    <value>输入这个任务所依赖的数据表（Tables）或其它对象，例如: "SiteLog, Users, UsersOnline"数据表</value>
  </data>
  <data name="UpdateSuccess.Text" xml:space="preserve">
    <value>修改已被保存。</value>
  </data>
  <data name="DeleteSuccess.Text" xml:space="preserve">
    <value>调度任务成功删除。</value>
  </data>
  <data name="ControlTitle_edit.Text" xml:space="preserve">
    <value>编辑任务调度</value>
  </data>
  <data name="plType.Text" xml:space="preserve">
    <value>类名和程序集</value>
  </data>
  <data name="ModuleHelp.Text" xml:space="preserve">
    <value>&lt;h1&gt;关于任务调度&lt;/h1&gt;&lt;p&gt;允许您在指定的时间间隔运行调度任务。&lt;/p&gt;</value>
  </data>
  <data name="plType.Help" xml:space="preserve">
    <value>这是完整的类名和程序集名。例如: "DotNetNuke.Entities.Users.PurgeUsersOnline, DOTNETNUKE"</value>
  </data>
  <data name="plServers.Text" xml:space="preserve">
    <value>运行于服务器:</value>
  </data>
  <data name="plServers.Help" xml:space="preserve">
    <value>输入运行此任务的服务器列表,　以逗号分隔</value>
  </data>
  <data name="Seconds.Text" xml:space="preserve">
    <value>秒</value>
  </data>
  <data name="plEnabled.Help" xml:space="preserve">
    <value>选中此项启用任务调度.</value>
  </data>
</root>