<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AddContent.Action" xml:space="preserve">
    <value>添加调度任务</value>
  </data>
  <data name="lblStatusLabel.Text" xml:space="preserve">
    <value>当前状态:</value>
  </data>
  <data name="lblMaxThreadsLabel.Text" xml:space="preserve">
    <value>最大线程:</value>
  </data>
  <data name="lblActiveThreadsLabel.Text" xml:space="preserve">
    <value>活动线程:</value>
  </data>
  <data name="lblFreeThreadsLabel.Text" xml:space="preserve">
    <value>空闲线程:</value>
  </data>
  <data name="lblCommand.Text" xml:space="preserve">
    <value>命令:</value>
  </data>
  <data name="lblProcessing.Text" xml:space="preserve">
    <value>正在处理的任务</value>
  </data>
  <data name="ScheduleID.Header" xml:space="preserve">
    <value>调度编号</value>
  </data>
  <data name="Type.Header" xml:space="preserve">
    <value>类型</value>
  </data>
  <data name="Started.Header" xml:space="preserve">
    <value>已开始</value>
  </data>
  <data name="Duration.Header" xml:space="preserve">
    <value>持续&lt;br&gt;(秒)</value>
  </data>
  <data name="ObjectDependencies.Header" xml:space="preserve">
    <value>依赖对象</value>
  </data>
  <data name="TriggeredBy.Header" xml:space="preserve">
    <value>触发事件</value>
  </data>
  <data name="Thread.Header" xml:space="preserve">
    <value>线程</value>
  </data>
  <data name="Notes.Header" xml:space="preserve">
    <value>备注</value>
  </data>
  <data name="lblQueue.Text" xml:space="preserve">
    <value>在队列中的任务</value>
  </data>
  <data name="NextStart.Header" xml:space="preserve">
    <value>下次运行于</value>
  </data>
  <data name="Overdue.Header" xml:space="preserve">
    <value>延迟&lt;br&gt;(秒)</value>
  </data>
  <data name="TimeRemaining.Header" xml:space="preserve">
    <value>剩余时间&lt;br&gt;(秒)</value>
  </data>
  <data name="NoTasks.Text" xml:space="preserve">
    <value>当前队列中没有任务，也没有正在处理中的任务</value>
  </data>
  <data name="DisabledMessage.Text" xml:space="preserve">
    <value>调度任务当前已关闭</value>
  </data>
  <data name="Disabled.Text" xml:space="preserve">
    <value>已关闭</value>
  </data>
  <data name="ManuallyStopped.Text" xml:space="preserve">
    <value>在调度任务状态页中手动停止</value>
  </data>
  <data name="ModuleHelp.Text" xml:space="preserve">
    <value>&lt;h1&gt;关于任务调度&lt;/h1&gt;&lt;p&gt;允许您在指定的时间间隔运行调度任务。&lt;/p&gt;</value>
  </data>
  <data name="cmdStart.Text" xml:space="preserve">
    <value>开始</value>
  </data>
  <data name="cmdStop.Text" xml:space="preserve">
    <value>停止</value>
  </data>
  <data name="ControlTitle_status.Text" xml:space="preserve">
    <value>调度任务状态</value>
  </data>
  <data name="Servers.Header" xml:space="preserve">
    <value>服务器</value>
  </data>
</root>