<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ModuleHelp.Text" xml:space="preserve">
    <value>&lt;p&gt;在此校验所有已安装的语言包，检验的标准是依据系统默认语言(英语)。校验处理的过程是检查所有的默认语言的资源文件并且和其它不同的语言包进行比较。&lt;/p&gt;
&lt;p&gt;在生成的报告里如果发现任何问题， 您可以使用&lt;strong&gt;语言编辑器&lt;/strong&gt;修正报告中的错误&lt;/p&gt;
&lt;p&gt;在校验资源文件的时候可能会发生以下三种问题:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;SPAN class=SubHead&gt;缺少资源文件&lt;/SPAN&gt;: 言语包缺少资源文件， 修正此问题在&lt;strong&gt;语言文件编辑器&lt;/strong&gt;中选择缺少的资源文件然后选择对应的语言，这样此语言对应的资源文件将会自动生成。&lt;/li&gt;

&lt;li&gt;&lt;SPAN class=SubHead&gt;资源文件不完整&lt;/SPAN&gt;: 默认资源文件中的一些条目在地方语言包资源文件中不存在，修正此问题在&lt;strong&gt;语言文件编辑器&lt;/strong&gt;中选择有问题的资源文件然后选择对应的语言， 您将会看到选项补足所有丢失的条目&lt;/li&gt;

&lt;li&gt;&lt;SPAN class=SubHead&gt;资源文件含有过时信息&lt;/SPAN&gt;: 默认资源文件中的一些条目在地方语言包资源文件中未发现，修正此问题在&lt;strong&gt;语言文件编辑器&lt;/strong&gt;中选择有问题的资源文件然后选择对应的语言， 此时所有多余的条目都将被删除。&lt;/li&gt;
&lt;/ul&gt;</value>
  </data>
  <data name="cmdVerify.Text" xml:space="preserve">
    <value>校验资源文件</value>
  </data>
  <data name="Locale.Text" xml:space="preserve">
    <value>语言包:&amp;nbsp; </value>
  </data>
  <data name="MissingFiles.Text" xml:space="preserve">
    <value>缺少资源文件:&amp;nbsp;</value>
  </data>
  <data name="MissingEntries.Text" xml:space="preserve">
    <value>不完整的资源文件:&amp;nbsp;</value>
  </data>
  <data name="ObsoleteEntries.Text" xml:space="preserve">
    <value>含有过时信息的资源文件:&amp;nbsp;</value>
  </data>
  <data name="ControlTitle_verify.Text" xml:space="preserve">
    <value>语言包资源文件校验</value>
  </data>
  <data name="OldFiles.Text" xml:space="preserve">
    <value>比系统默认文件旧的资源文件:&amp;nbsp;</value>
  </data>
  <data name="DuplicateEntries.Text" xml:space="preserve">
    <value>文件中有重复词条:&amp;nbsp;</value>
  </data>
  <data name="ErrorFiles.Text" xml:space="preserve">
    <value>无法识别的资源文件:&amp;nbsp;</value>
  </data>
</root>