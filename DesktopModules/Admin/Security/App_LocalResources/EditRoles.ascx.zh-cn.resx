<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="BasicSettings.Text" xml:space="preserve">
    <value>基本设置</value>
  </data>
  <data name="BasicSettingsDescription.Text" xml:space="preserve">
    <value>您可在此进行角色的基本设置。</value>
  </data>
  <data name="RoleName.Text" xml:space="preserve">
    <value>角色名称</value>
  </data>
  <data name="RoleName.Help" xml:space="preserve">
    <value>键入角色的名称</value>
  </data>
  <data name="Description.Text" xml:space="preserve">
    <value>描述</value>
  </data>
  <data name="Description.Help" xml:space="preserve">
    <value>键入角色的描述。</value>
  </data>
  <data name="PublicRole.Text" xml:space="preserve">
    <value>公开角色？</value>
  </data>
  <data name="PublicRole.Help" xml:space="preserve">
    <value>是否为公开角色？</value>
  </data>
  <data name="AutoAssignment.Text" xml:space="preserve">
    <value>是否自动分配？</value>
  </data>
  <data name="AutoAssignment.Help" xml:space="preserve">
    <value>当用户注册这个角色是否自动分配给用户？</value>
  </data>
  <data name="AdvancedSettings.Text" xml:space="preserve">
    <value>高级设置</value>
  </data>
  <data name="AdvancedSettingsHelp.Text" xml:space="preserve">
    <value>您可在此进行角色的高级设置。</value>
  </data>
  <data name="ServiceFee.Text" xml:space="preserve">
    <value>服务费</value>
  </data>
  <data name="ServiceFee.Help" xml:space="preserve">
    <value>输入用户加入该角色所需的费用。</value>
  </data>
  <data name="BillingPeriod.Text" xml:space="preserve">
    <value>收费周期 (每)</value>
  </data>
  <data name="BillingPeriod.Help" xml:space="preserve">
    <value>在此输入收费周期, 第一个文本框输入数字，例如, 2星期或者1个月</value>
  </data>
  <data name="TrialFee.Text" xml:space="preserve">
    <value>试用费</value>
  </data>
  <data name="TrialFee.Help" xml:space="preserve">
    <value>输入用户试用该角色所需的费用。</value>
  </data>
  <data name="TrialPeriod.Text" xml:space="preserve">
    <value>试用期 (每)</value>
  </data>
  <data name="TrialPeriod.Help" xml:space="preserve">
    <value>在此输入试用期, 第一个文本框输入数字，例如, 2星期或者1个月</value>
  </data>
  <data name="cmdManage.Text" xml:space="preserve">
    <value>管理拥有此角色的用户</value>
  </data>
  <data name="valRoleName.Text" xml:space="preserve">
    <value>&lt;br&gt;请输入无效的角色名</value>
  </data>
  <data name="valServiceFee1.Text" xml:space="preserve">
    <value>&lt;br&gt;输入的服务费无效</value>
  </data>
  <data name="valServiceFee2.Text" xml:space="preserve">
    <value>&lt;br&gt;服务费必须大于0</value>
  </data>
  <data name="valBillingPeriod1.Text" xml:space="preserve">
    <value>&lt;br&gt;输入的收费周期无效</value>
  </data>
  <data name="valBillingPeriod2.Text" xml:space="preserve">
    <value>&lt;br&gt;收费周期必须大于0</value>
  </data>
  <data name="valTrialFee1.Text" xml:space="preserve">
    <value>&lt;br&gt;输入的试用费无效</value>
  </data>
  <data name="valTrialFee2.Text" xml:space="preserve">
    <value>&lt;br&gt;试用费必须大于0</value>
  </data>
  <data name="valTrialPeriod1.Text" xml:space="preserve">
    <value>&lt;br&gt;输入的试用期无效</value>
  </data>
  <data name="valTrialPeriod2.Text" xml:space="preserve">
    <value>&lt;br&gt;试用期必须大于0</value>
  </data>
  <data name="ControlTitle_edit.Text" xml:space="preserve">
    <value>修改安全角色</value>
  </data>
  <data name="ModuleHelp.Text" xml:space="preserve">
    <value>&lt;h1&gt;关于编辑安全角色&lt;/h1&gt;&lt;p&gt;管理员可以在此管理站点中的安全角色。本模块允许您添加新角色，修改已有角色，删除角色和管理这个拥有此角色的用户。&lt;/p&gt;</value>
  </data>
  <data name="plIcon.Help" xml:space="preserve">
    <value>为角色选择一个Icon图标</value>
  </data>
  <data name="plIcon.Text" xml:space="preserve">
    <value>小图标:</value>
  </data>
  <data name="plRoleGroups.Help" xml:space="preserve">
    <value>选择这个角色所属角色组。</value>
  </data>
  <data name="plRoleGroups.Text" xml:space="preserve">
    <value>角色组</value>
  </data>
  <data name="plRSVPCode.Help" xml:space="preserve">
    <value>输入此角色 RSVP（快速邀请） 代码 ,  可以使用此代码提供简洁的方法另用户加入不同的角色。</value>
  </data>
  <data name="plRSVPCode.Text" xml:space="preserve">
    <value>RSVP 代码:</value>
  </data>
  <data name="DuplicateRole.Text" xml:space="preserve">
    <value>添加角色失败, 具有同样名的角色已经存在。</value>
  </data>
  <data name="plRSVPLink.Help" xml:space="preserve">
    <value>如果提供了RSVP码，可以共享以下链接, 已登录用户输入此链接将会直接加入此角色.</value>
  </data>
  <data name="plRSVPLink.Text" xml:space="preserve">
    <value>RSVP 链接:</value>
  </data>
  <data name="ProcessorWarning.Text" xml:space="preserve">
    <value>&lt;b&gt;警告:&lt;/b&gt; 您需要先在站点设置下配置支付接口， 才可以启用付费角色服务。</value>
  </data>
  <data name="IncompatibleFee.Text" xml:space="preserve">
    <value>所输入的服务费 - {0} - 和收费周期 "none" 不匹配，请选择适当的收费周期。</value>
  </data>
  <data name="valRoleName2.Text" xml:space="preserve">
    <value>&lt;br&gt;角色名无效 - 只能包含以下字符 A-Za-z0-9_- 和空格</value>
  </data>
</root>