<?xml version="1.0" encoding="utf-8" ?>
<root>
	<!-- 
    Microsoft ResX Schema 
    
    Version 1.3
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">1.3</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1">this is my long string</data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        [base64 mime encoded serialized .NET Framework object]
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        [base64 mime encoded string representing a byte array form of the .NET Framework object]
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used forserialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
	<xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
		<xsd:element name="root" msdata:IsDataSet="true">
			<xsd:complexType>
				<xsd:choice maxOccurs="unbounded">
					<xsd:element name="data">
						<xsd:complexType>
							<xsd:sequence>
								<xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
								<xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
							</xsd:sequence>
							<xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
							<xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
							<xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
						</xsd:complexType>
					</xsd:element>
					<xsd:element name="resheader">
						<xsd:complexType>
							<xsd:sequence>
								<xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
							</xsd:sequence>
							<xsd:attribute name="name" type="xsd:string" use="required" />
						</xsd:complexType>
					</xsd:element>
				</xsd:choice>
			</xsd:complexType>
		</xsd:element>
	</xsd:schema>
	<resheader name="resmimetype">
		<value>text/microsoft-resx</value>
	</resheader>
	<resheader name="version">
		<value>1.3</value>
	</resheader>
	<resheader name="reader">
		<value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
	</resheader>
	<resheader name="writer">
		<value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
	</resheader>
	<data name="cmdAdd.Text">
		<value>Add</value>
	</data>
	<data name="msgEditChildBlog.Text">
		<value>Edit Child Blog</value>
	</data>
	<data name="lblTimeZone.Text">
		<value>Time Zone:</value>
	</data>
	<data name="chkSyndicateIndependant.Text">
		<value>Syndicate independantly&lt;br&gt;(If not checked it will be syndicated as a category of the parent blog)</value>
	</data>
	<data name="lblTitle.Text">
		<value>Title:</value>
	</data>
	<data name="lblDateFormat.Text">
		<value>Date Format:</value>
	</data>
	<data name="chkComments.Text">
		<value>Allow users to post comments</value>
	</data>
	<data name="lblOptionsDescription.Text">
		<value>These options control the main blog features.</value>
	</data>
	<data name="lblDescription.Text">
		<value>Description:</value>
	</data>
	<data name="lblChildBlogsDescription.Text">
		<value>If you would like to break your blog up into different categories, this is 
				where you define them. Having&amp;nbsp;Child-Blogs allows you to create 
				sub-blogs&amp;nbsp;within your blog. Each one has its own options for publication 
				and can be syndicated separately from your root blog.</value>
	</data>
	<data name="msgDeleteChildBlog.Text">
		<value>Are you sure you want to delete this child blog ?</value>
	</data>
	<data name="ModuleHelp.Text">
		<value>&lt;h1&gt;Blog&lt;/h1&gt;
&lt;p&gt;...&lt;/p&gt;
        </value>
	</data>
	<data name="lblCulture.Text">
		<value>Culture:</value>
	</data>
	<data name="rdoUserName_UserName.Text">
		<value>User Name</value>
	</data>
	<data name="lblUserIdentity.Text">
		<value>When displaying your identity use:</value>
	</data>
	<data name="valTitleDescription.ErrorMessage">
		<value>Title Description is Required</value>
	</data>
	<data name="lblDateTime.Text">
		<value>Date and Time Options:</value>
	</data>
	<data name="chkSyndicate.Text">
		<value>Syndicate this blog.</value>
	</data>
	<data name="rdoUserName_FullName.Text">
		<value>Full Name</value>
	</data>
	<data name="lblChildBlogs.Text">
		<value>Child Blogs:</value>
	</data>
	<data name="chkPublic.Text">
		<value>Make this blog public</value>
	</data>
	<data name="lblOptions.Text">
		<value>Blog Options:</value>
	</data>
	<data name="lblTitleDescription.Text">
		<value>This is the display title for your blog. It will display at the top of your 
			entry list and in the blog directory.</value>
	</data>
	<data name="lblSyndicationOptions.Text">
		<value>Syndication Options:</value>
	</data>
	<data name="msgCreateBlog.Text">
		<value>Create new Blog</value>
	</data>
	<data name="lblSyndicationEmail.Text">
		<value>Use this email for the "ManagingEditor" rss field:</value>
	</data>
	<data name="lblDateTimeDescription.Text">
		<value>These options control how date and time are displayed within your blog. This 
			setting effects all categories and entries within your blog.</value>
	</data>
	<data name="lblDescriptionDescription.Text">
		<value>This is a brief summary description of your blog. It's a good place to describe 
			your intentions with your blog and what information readers can expect.</value>
	</data>
	<data name="msgEditBlog.Text">
		<value>Edit Blog</value>
	</data>
	<data name="chkAllowAnonymous.Text">
		<value>Allow anonymous users to post comments</value>
	</data>
	<data name="chkEmailNotification.Text">
		<value>Send mail notification after comments and trackbacks are posted</value>
	</data>
	<data name="msgCreateNewChildBlog.Text">
		<value>Create new Child Blog</value>
	</data>
	<data name="valTitle.ErrorMessage">
		<value>Title is Required</value>
	</data>
	<data name="msgDeleteBlog.Text">
		<value>Are you sure you want to delete this blog ?</value>
	</data>
	<data name="chkAllowTrackbacks.Text">
		<value>Allow Trackback comments</value>
	</data>
	<data name="chkMustApproveTrackbacks.Text">
		<value>Approval for Trackback Comments required</value>
	</data>
	<data name="chkMustApproveTrackbacks.Help">
		<value>If you enabled these option you must approve a Trackback comment before the comment is shown in the comment list.</value>
	</data>
	<data name="chkMustApproveComments.Text">
		<value>Approval for user comments required</value>
	</data>
	<data name="chkMustApproveComments.Help">
		<value>If you enabled these option you must approve a user comments before the comment is shown in the comment list.</value>
	</data>
	<data name="chkMustApproveAnonymous.Text">
		<value>Approval for anonymous comments required</value>
	</data>
	<data name="chkMustApproveAnonymous.Help">
		<value>If you enabled these option you must approve a comments from anonymous users before the comment is shown in the comment list.</value>
	</data>
	<data name="chkAutoTrackbacks.Text">
		<value>Trackback Auto Discovery (Client Mode)</value>
	</data>
	<data name="chkAutoTrackbacks.Help">
		<value>If you enable this option an auto discovery for trackbacks will be done while saving your blog entry</value>
	</data>
	<data name="chkCaptcha.Text">
		<value>Use CAPTCHA for comments</value>
	</data>
	<data name="lblCommentOptions.Text">
		<value>Comment Options:</value>
	</data>
	<data name="lblCommentOptionsDescription.Text">
		<value>These options control the comment related settings.</value>
	</data>
	<data name="lblTrackbackOptions.Text">
		<value>Trackback Options:</value>
	</data>
	<data name="lblTrackbackOptionsDescription.Text">
		<value>These options control the Trackback related settings.</value>
	</data>
	<data name="lblMetaWeblogOptions.Text">
		<value>MetaWeblog Options:</value>
	</data>
	<data name="lblMetaWeblogOptionsDescription.Text">
		<value>Use the following URL to connect to your blog using a MetaWeblog enabled client such as Windows Live Writer or Word 2007.  Change the tabid parameter as needed if this blog appears on a different tab.</value>
	</data>
	<data name="lblRegenerate.Text">
		<value>Regenerate Blog PermaLinks:</value>
	</data>
	<data name="lblRegenerateDescription.Text">
		<value>Regenerate all blog permalinks.  This link can be used after the Friendly URLs setting has been changed for the site.</value>
	</data>
	<data name="cmdGenerateLinks.Text">
		<value>Regenerate Blog Permalinks</value>
	</data>
</root>