<?xml version="1.0" encoding="utf-8" ?>
<root>
	<!-- 
    Microsoft ResX Schema 
    
    Version 1.3
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">1.3</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1">this is my long string</data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        [base64 mime encoded serialized .NET Framework object]
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        [base64 mime encoded string representing a byte array form of the .NET Framework object]
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used forserialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
	<xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
		<xsd:element name="root" msdata:IsDataSet="true">
			<xsd:complexType>
				<xsd:choice maxOccurs="unbounded">
					<xsd:element name="data">
						<xsd:complexType>
							<xsd:sequence>
								<xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
								<xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
							</xsd:sequence>
							<xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
							<xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
							<xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
						</xsd:complexType>
					</xsd:element>
					<xsd:element name="resheader">
						<xsd:complexType>
							<xsd:sequence>
								<xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
							</xsd:sequence>
							<xsd:attribute name="name" type="xsd:string" use="required" />
						</xsd:complexType>
					</xsd:element>
				</xsd:choice>
			</xsd:complexType>
		</xsd:element>
	</xsd:schema>
	<resheader name="resmimetype">
		<value>text/microsoft-resx</value>
	</resheader>
	<resheader name="version">
		<value>1.3</value>
	</resheader>
	<resheader name="reader">
		<value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
	</resheader>
	<resheader name="writer">
		<value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
	</resheader>
	<data name="valDescription.ErrorMessage">
		<value>Description is required</value>
	</data>
	<data name="lblCopyright.Text">
		<value>Copyright: </value>
	</data>
	<data name="lblSummary.Text">
		<value>Summary:</value>
	</data>
	<data name="lblTitle.Text">
		<value>Title:</value>
	</data>
	<data name="lblAttachmentDescription.Text">
		<value>Description:</value>
	</data>
	<data name="lblEntryDate.Text">
		<value>Entry Date:</value>
	</data>
	<data name="secLinkedFiles.Text">
		<value>Linked Files:</value>
	</data>
	<data name="lblDescription.Text">
		<value>Blog:</value>
	</data>
	<data name="ModuleHelp.Text">
		<value>&lt;h1&gt;Blog&lt;/h1&gt;
&lt;p&gt;...&lt;/p&gt;
        </value>
	</data>
	<data name="valTitle.ErrorMessage">
		<value>Title is required</value>
	</data>
	<data name="chkAllowComments.Text">
		<value>Allow users to comment on this entry (overrides Blog Setting)</value>
	</data>
	<data name="valEntry.ErrorMessage">
		<value>Entry is Required</value>
	</data>
	<data name="chkDisplayCopyright.Text">
		<value>Display Copyright notice at the bottom of your entry.</value>
	</data>
	<data name="valUpload.ErrorMessage">
		<value>The File [FILENAME] Is A Restricted File Type for Images. Valid File Types Include JPG, GIF and PNG&lt;br&gt;</value>
	</data>
	<data name="lblAddAttachment.Text">
		<value>Attachment:</value>
	</data>
	<data name="msgCopyright.Text">
		<value>Copyright ©</value>
	</data>
	<data name="btnUploadAttachment.Text">
		<value>Upload</value>
	</data>
	<data name="valEntryDateData.ErrorMessage">
		<value>Entry Date is not a valid date</value>
	</data>
	<data name="lnkDeleteFile.AlternateText">
		<value>Delete File !</value>
	</data>
	<data name="cboChildBlogs.DataTextField">
		<value>Title</value>
	</data>
	<data name="msgEnsureDeleteFile.Text">
		<value>Are you really sure to delete the file</value>
	</data>
	<data name="btnUploadPicture.Text">
		<value>Upload</value>
	</data>
	<data name="valEntryDate.ErrorMessage">
		<value>Entry Date is required</value>
	</data>
	<data name="lblAltText.Text">
		<value>Alt Text:</value>
	</data>
	<data name="lblAddPicture.Text">
		<value>Picture:</value>
	</data>
	<data name="secEntryOptions.Text">
		<value>Entry Options:</value>
	</data>
	<data name="lblEntryOptions.Text">
		<value>Entry Options:</value>
	</data>
	<data name="chkPublished.Text">
		<value>Published (If not checked, only you will see this entry)</value>
	</data>
	<data name="secUploadOption.Text">
		<value>Upload Options:</value>
	</data>
	<data name="lblChildBlog.Text">
		<value>Parent Blog:</value>
	</data>
	<data name="txtDescriptionOptional.Text">
		<value>(The summary is optional, if you choose to not supply one, a short summary will be generated from your entry.)</value>
	</data>
	<data name="msgAddBlogEntry.Text">
		<value>Add blog entry</value>
	</data>
	<data name="msgEditBlogEntry.Text">
		<value>Edit blog entry</value>
	</data>
	<data name="lblTrackbackUrl.Text">
		<value>Trackback Url:</value>
	</data>
	<data name="Filename.Header">
		<value>File Name</value>
	</data>
</root>